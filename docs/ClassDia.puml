@startuml KlassenDiagram

' Interfaces
interface ICsvImporter {
  + loadFile(path: String): List<String[]]
  + parseColumns(dateIndex: int, priceIndex: int): List<PriceEntry]
  + setSeparator(separator: String): void
}
interface IStatisticsAnalyzer {
  + calculateReturns(data: List<PriceEntry>): List<Double]
  + calculateMean(returns: List<Double>): double
  + calculateStdDev(returns: List<Double>): double
  + calculateSharpeRatio(returns: List<Double>, riskFreeRate: double): double
}
interface IPlanSimulator {
  + runSimulation(): List<Double]
  + calculateConfidenceIntervals(): ConfidenceInterval
}
interface IChartGenerator {
  + generateHistogram(data: List<Double>): Image
  + generateGaussianCurve(data: List<Double>): Image
  + exportChart(chart: Image, filename: String): void
}
interface ILoggingService {
  + logInfo(message: String): void
  + logError(message: String, exception: Exception): void
}

' Concrete Classes
class CsvImporter implements ICsvImporter {
  - separator: String
  - csvFile: File
  - hasHeader: boolean
  + loadFile(path: String): List<String[]]
  + parseColumns(dateIndex: int, priceIndex: int): List<PriceEntry]
  + setSeparator(separator: String): void
}

class PriceEntry {
  - date: LocalDate
  - closePrice: double
}

class StatisticsAnalyzer implements IStatisticsAnalyzer {
  + calculateReturns(data: List<PriceEntry>): List<Double]
  + calculateMean(returns: List<Double>): double
  + calculateStdDev(returns: List<Double>): double
  + calculateSharpeRatio(returns: List<Double>, riskFreeRate: double): double
}

abstract class PlanSimulator implements IPlanSimulator {
  - iterations: int
  - horizonYears: int
  - startCapital: double
  - monthlyContribution: double
  + runSimulation(): List<Double]
  + calculateConfidenceIntervals(): ConfidenceInterval
}

class SavingsPlanSimulator extends PlanSimulator {
  + runSavingsSimulation(): List<Double]
}

class PayoutPlanSimulator extends PlanSimulator {
  + runPayoutSimulation(): List<Double]
}

class ConfidenceInterval {
  - lowerBound: double
  - upperBound: double
}

class ChartGenerator implements IChartGenerator {
  + generateHistogram(data: List<Double>): Image
  + generateGaussianCurve(data: List<Double>): Image
  + exportChart(chart: Image, filename: String): void
}

class FileLoggingService implements ILoggingService {
  - logFile: File
  + logInfo(message: String): void
  + logError(message: String, exception: Exception): void
}

' MVC Layer
interface IImportController {
  + initialize(): void
  + onLoadFile(path: String): void
  + onCleanData(): void
}
class ImportController implements IImportController {
  - importer: ICsvImporter
  - loggingService: ILoggingService
  + initialize(): void
  + onLoadFile(path: String): void
  + onCleanData(): void
}

interface ISimulationController {
  + startSimulation(iterations: int, horizonYears: int, startCapital: double, monthlyContribution: double): void
}
class SimulationController implements ISimulationController {
  - planSimulator: IPlanSimulator
  - statsAnalyzer: IStatisticsAnalyzer
  - chartGenerator: IChartGenerator
  - loggingService: ILoggingService
  + startSimulation(iterations: int, horizonYears: int, startCapital: double, monthlyContribution: double): void
}

interface IChartController {
  + renderHistogram(data: List<Double>): void
  + renderGaussianCurve(data: List<Double>): void
}
class ChartController implements IChartController {
  - chartGenerator: IChartGenerator
  - loggingService: ILoggingService
  + renderHistogram(data: List<Double>): void
  + renderGaussianCurve(data: List<Double>): void
}

class MainController {
  - importController: IImportController
  - simulationController: ISimulationController
  - chartController: IChartController
  - loggingService: ILoggingService
  + switchToImportView(): void
  + switchToSimulationView(): void
  + switchToChartView(): void
}

class MainView
class ImportView
class SimulationView
class ChartView

' Relationships
CsvImporter *-- "0..*" PriceEntry : contains

StatisticsAnalyzer --> CsvImporter : verwendet
SavingsPlanSimulator --> StatisticsAnalyzer : nutzt
PayoutPlanSimulator --> StatisticsAnalyzer : nutzt
PlanSimulator --> ConfidenceInterval : gibt zurÃ¼ck
ChartGenerator --> PlanSimulator : visualisiert

' Injection (composition)
ImportController *-- ICsvImporter
ImportController *-- ILoggingService

SimulationController *-- IPlanSimulator
SimulationController *-- IStatisticsAnalyzer
SimulationController *-- IChartGenerator
SimulationController *-- ILoggingService

ChartController *-- IChartGenerator
ChartController *-- ILoggingService

MainController *-- IImportController
MainController *-- ISimulationController
MainController *-- IChartController
MainController *-- ILoggingService

' MVC wiring
ImportView --> IImportController
SimulationView --> ISimulationController
ChartView --> IChartController
MainView --> MainController

@enduml
