@startuml KlassenDiagram

' Interfaces
interface ICsvImporter {
  + loadFile(path: String): List<String[]>
  + parseColumns(dateIndex: int, priceIndex: int): List<PriceEntry>
  + setSeparator(separator: String): void
  + getEntrys(): List<PriceEntry>
}
interface IStatisticsAnalyzer {
  + getReturns(): List<Double>
  + getSeries(): List<List<Double>> 
  + getMedian(): double
  + getAverage(): double
  + getStdDev(): double
}
interface IPlanSimulator {
  + runSimulation(): List<Double]
  + calculateConfidenceIntervals(): ConfidenceInterval
}
interface IChartGenerator {
  + generateHistogram(data: List<Double>): Image
  + generateGaussianCurve(data: List<Double>): Image
  + exportChart(chart: Image, filename: String): void
}
interface ILoggingService {
  + logInfo(message: String): void
  + logError(message: String, exception: Exception): void
  + getLogFilePath(): String
}

' Concrete Classes
class CsvImporter implements ICsvImporter {
  - separator: String
  - csvFile: File
  - hasHeader: boolean
  - priceEntries: List<PriceEntry>
  - formatter: DateTimeFormatter
  + loadFile(path: String): List<String[]>
  + parseColumns(dateIndex: int, priceIndex: int): List<PriceEntry>
  + setSeparator(separator: String): void
  + getEntrys(): List<PriceEntry>
}

class PriceEntry {
  - date: LocalDate
  - closePrice: double
  + getDate(): LocalDate
  + getClosePrice(): double
}

class StatisticsAnalyzer implements IStatisticsAnalyzer {
  - prices: List<PriceEntry>
  - returns: List<Double>
  - series: List<List<Double>>
  - avg: double
  - median: double
  - standardDeviation: double
  - drawdown: double
  - calculateReturns(): List<Double>
  + getSeries(): List<List<Double>>
  - calculateAvg(): double
  - calculateStdDev(): double
  - calculateMed(): double
  - calculateMaxDrawdown(): double
  + getReturns(): List<Double>
  + getSeries(): List<List<Double>> 
  + getMedian(): double
  + getAverage(): double
  + getStdDev(): double
}

abstract class PlanSimulator implements IPlanSimulator {
  - iterations: int
  - horizonYears: int
  - startCapital: double
  - monthlyContribution: double
  + runSimulation(): List<Double]
  + calculateConfidenceIntervals(): ConfidenceInterval
}

class SavingsPlanSimulator extends PlanSimulator {
  + runSavingsSimulation(): List<Double]
}

class PayoutPlanSimulator extends PlanSimulator {
  + runPayoutSimulation(): List<Double]
}

class ConfidenceInterval {
  - lowerBound: double
  - upperBound: double
}

class ChartGenerator implements IChartGenerator {
  + generateHistogram(data: List<Double>): Image
  + generateGaussianCurve(data: List<Double>): Image
  + exportChart(chart: Image, filename: String): void
}

class FileLoggingService implements ILoggingService {
  - logFile: File
  + logInfo(message: String): void
  + logError(message: String, exception: Exception): void
  - writeLog(level: String, message: String): void
  + getLogFilePath(): String
}

class SceneController {
  - [FXML Elements]
  - separatorChecked: boolean = false
  - dateColumnChecked: boolean = false
  - priceColumnChecked: boolean = false
  - csvReady: boolean = false
  - csvFile: File
  - loggingService: ILoggingService
  - csvImporter: ICsvImporter
  - statAna: IStatisticsAnalyzer
  - timeout: double
  - stage: Stage
  - alert: Alert
  - quit(e: ActionEvent): void
  - showInfo(e: ActionEvent): void
  - openCSV(e: ActionEvent): void
  - readCsv(e: ActionEvent): void
  - calculateStatistics(): void
  - initialize(url: URL, rb: ResourceBundle): void
}

' Relationships
CsvImporter *-- "0..*" PriceEntry : contains

PlanSimulator --> ConfidenceInterval : gibt zurÃ¼ck
ChartGenerator --> PlanSimulator : visualisiert

' Injection (composition)

SceneController *-- ILoggingService
SceneController *-- ICsvImporter
SceneController *-- IStatisticsAnalyzer
SceneController *-- "2" IPlanSimulator
SceneController *-- IChartGenerator

@enduml
